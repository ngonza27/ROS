\#!/usr/bin/env python

import rospy
from nav_msgs.msg import Odometry
from ackermann_msgs.msg import AckermannDrive
from geometry_msgs.msg import Point
import math
import tf
import time
import random

class PathFollower:
    def __init__(self, path):
        self.path = path
        self.current_goal_index = 0
        self.current_goal = Point()
        self.odom = Odometry()
        self.sub_odom = rospy.Subscriber('/carla/ego_vehicle/odometry', Odometry, self.odom_callback)
        self.pub_cmd = rospy.Publisher('/carla/ego_vehicle/ackermann_cmd', AckermannDrive, queue_size=1)


    def odom_callback(self, odom):
        self.odom = odom
        self.update_current_goal()

    def finalize(self):
        rospy.loginfo('Halting motors, aligning wheels and exiting...')
        ackermann_cmd_msg = AckermannDrive()
        ackermann_cmd_msg.speed = 0
        ackermann_cmd_msg.steering_angle = 0
        self.pub_cmd.publish(ackermann_cmd_msg)


    def update_current_goal(self):
        current_pos = self.odom.pose.pose.position
        goal_pos = Point(self.path[self.current_goal_index][0], self.path[self.current_goal_index][1], 0)
        distance = math.sqrt((current_pos.x - goal_pos.x)**2 + (current_pos.y - goal_pos.y)**2)
        angle_to_goal = math.atan2(current_pos.y - goal_pos.y, current_pos.x - goal_pos.x)
        current_yaw = self.get_yaw_from_quaternion(self.odom.pose.pose.orientation)
        angle_diff = angle_to_goal - current_yaw
	rospy.logwarn(angle_diff)
        while angle_diff < 0:
            self.current_goal_index = self.current_goal_index + 1 if (self.current_goal_index + 1) < len(self.path) else self.current_goal_index
	    if self.current_goal_index >= len(self.path)-1:
	        self.finalize()
	    goal_pos = Point(self.path[self.current_goal_index][0], self.path[self.current_goal_index][1], 0)
	    angle_to_goal = math.atan2(current_pos.y - goal_pos.y, current_pos.x - goal_pos.x)
            current_yaw = self.get_yaw_from_quaternion(self.odom.pose.pose.orientation)
            angle_diff = angle_to_goal - current_yaw
            if angle_diff < 0:
	        break
        if distance < 0.5:
            if self.current_goal_index < len(self.path)-1:
                self.current_goal_index += 1
                self.current_goal = Point(self.path[self.current_goal_index][0], self.path[self.current_goal_index][1], 0)
	    else:
	        self.finalize()
        
    def run(self):
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            current_pos = self.odom.pose.pose.position
            goal_pos = self.current_goal
	    if goal_pos.x == 0:
                goal_pos = Point(self.path[self.current_goal_index][0], self.path[self.current_goal_index][1], 0)
            diff_x = goal_pos.x - current_pos.x
            diff_y = goal_pos.y - current_pos.y
            distance = math.sqrt(diff_x**2 + diff_y**2)
            if distance > 0.5:
                angle_to_goal = math.atan2(diff_y, diff_x)
                current_yaw = self.get_yaw_from_quaternion(self.odom.pose.pose.orientation)
                angle_diff = angle_to_goal - current_yaw
                #rospy.loginfo(self.path[self.current_goal_index][0])
		#rospy.logerr(self.current_goal_index)
                if angle_diff > math.pi:
                    angle_diff -= 2*math.pi
                elif angle_diff < -math.pi:
                    angle_diff += 2*math.pi
                cmd_ack = AckermannDrive()
                cmd_ack.speed = 4.0
                cmd_ack.steering_angle = max(min(angle_diff*0.5, 0.7), -0.7)
                self.pub_cmd.publish(cmd_ack)
            else:
                cmd_ack = AckermannDrive()
                cmd_ack.speed = 2.0
                cmd_ack.steering_angle = 0.0
                self.pub_cmd.publish(cmd_ack)
            rate.sleep()

    def get_yaw_from_quaternion(self, quaternion):
        quaternion_list = [quaternion.x, quaternion.y, quaternion.z, quaternion.w]
        return tf.transformations.euler_from_quaternion(quaternion_list)[2]


if __name__ == '__main__':
    rospy.init_node('path_follower')
    path = [ (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.610595703125, -130.16395568847656), (108.61063385009766, -130.16395568847656), (108.61063385009766, -130.16395568847656), (108.61063385009766, -130.16395568847656), (108.61083984375, -130.55990600585938), (108.61083984375, -130.55990600585938), (108.61083984375, -130.55990600585938), (107.400390625, -168.60501098632812), (107.400390625, -168.60501098632812), (107.400390625, -168.60501098632812), (107.26384735107422, -170.34677124023438), (107.26384735107422, -170.34677124023438), (107.26384735107422, -170.34677124023438), (106.91014099121094, -172.96339416503906), (106.91014099121094, -172.96339416503906), (106.87423706054688, -173.16476440429688), (106.49856567382812, -174.8290557861328), (106.49856567382812, -174.8290557861328), (106.49856567382812, -174.8290557861328), (104.69878387451172, -179.190185546875), (104.69878387451172, -179.190185546875), (104.5916976928711, -179.3773651123047), (102.01937103271484, -183.110107421875), (102.01937103271484, -183.110107421875), (102.01937103271484, -183.110107421875), (99.24679565429688, -186.15286254882812), (99.24679565429688, -186.15286254882812), (99.24679565429688, -186.15286254882812), (94.47476196289062, -190.53868103027344), (94.47476196289062, -190.53868103027344), (94.47476196289062, -190.53868103027344), (93.50442504882812, -191.3148956298828), (93.50442504882812, -191.3148956298828), (93.50442504882812, -191.3148956298828), (88.96231079101562, -194.03355407714844), (88.96231079101562, -194.03355407714844), (88.96231079101562, -194.03355407714844), (88.07637786865234, -194.4345703125), (88.07637786865234, -194.4345703125), (87.7782974243164, -194.56570434570312), (86.21968841552734, -195.23069763183594), (86.21968841552734, -195.23069763183594), (86.21968841552734, -195.23069763183594), (58.5588493347168, -207.15145874023438), (58.5588493347168, -207.15145874023438), (58.26130676269531, -207.2809295654297), (57.36749267578125, -207.6563262939453), (57.36749267578125, -207.6563262939453), (57.36749267578125, -207.6563262939453), (53.359291076660156, -208.9930419921875), (53.359291076660156, -208.9930419921875), (53.359291076660156, -208.9930419921875), (51.83259963989258, -209.3983917236328), (51.83259963989258, -209.3983917236328), (51.83259963989258, -209.3983917236328), (49.9456787109375, -209.91378784179688), (49.9456787109375, -209.91378784179688), (49.9456787109375, -209.91378784179688), (47.51491165161133, -210.6389923095703), (47.51491165161133, -210.6389923095703), (47.51491165161133, -210.6389923095703), (45.75558853149414, -211.25933837890625), (45.75558853149414, -211.25933837890625), (45.75558853149414, -211.25933837890625), (42.79285430908203, -212.4430389404297), (42.79285430908203, -212.4430389404297), (42.79285430908203, -212.4430389404297), (42.252197265625, -212.67254638671875), (42.252197265625, -212.67254638671875), (42.03178787231445, -212.7709503173828), (40.443336486816406, -213.51223754882812), (40.443336486816406, -213.51223754882812), (40.443336486816406, -213.51223754882812), (39.30811309814453, -214.0447235107422), (39.30811309814453, -214.0447235107422), (39.30811309814453, -214.0447235107422), (38.198638916015625, -214.5479278564453), (38.198638916015625, -214.5479278564453), (38.198638916015625, -214.5479278564453), (35.50843811035156, -215.5809783935547), (35.50843811035156, -215.5809783935547), (35.50843811035156, -215.5809783935547), (32.98847961425781, -216.28575134277344), (32.98847961425781, -216.28575134277344), (32.98847961425781, -216.28575134277344), (31.740766525268555, -216.5537109375), (31.740766525268555, -216.5537109375), (31.49172019958496, -216.60345458984375), (27.618593215942383, -217.30331420898438), (27.618593215942383, -217.30331420898438), (25.93040657043457, -217.57786560058594), (25.93040657043457, -217.57786560058594), (25.93040657043457, -217.57786560058594), (4.2485785484313965, -224.75001525878906), (4.2485785484313965, -224.75001525878906), (4.005504131317139, -224.8722381591797), (3.287604808807373, -225.2322540283203), (3.287604808807373, -225.2322540283203), (3.287604808807373, -225.2322540283203), (2.466801404953003, -225.63409423828125), (2.466801404953003, -225.63409423828125), (2.466801404953003, -225.63409423828125), (0.7051774263381958, -226.41598510742188), (0.7051774263381958, -226.41598510742188), (0.7051774263381958, -226.41598510742188), (-4.592765808105469, -227.92108154296875), (-4.592765808105469, -227.92108154296875), (-4.722357273101807, -227.94346618652344), (-12.057527542114258, -228.59046936035156), (-12.057527542114258, -228.59046936035156), (-12.057527542114258, -228.59046936035156), (-13.801331520080566, -228.56553649902344), (-13.801331520080566, -228.56553649902344), (-13.801331520080566, -228.56553649902344), (-17.52360725402832, -228.51841735839844), (-17.52360725402832, -228.51841735839844), (-17.52360725402832, -228.51841735839844), (-21.44808006286621, -228.59356689453125), (-21.44808006286621, -228.59356689453125), (-21.44808006286621, -228.59356689453125), (-26.437530517578125, -229.18540954589844), (-26.437530517578125, -229.18540954589844), (-26.437530517578125, -229.18540954589844), (-31.255355834960938, -230.593505859375), (-31.255355834960938, -230.593505859375), (-31.255355834960938, -230.593505859375), (-33.1224250793457, -231.3859100341797), (-33.1224250793457, -231.3859100341797), (-33.1224250793457, -231.3859100341797), (-35.52463912963867, -232.5067901611328), (-35.52463912963867, -232.5067901611328), (-35.52463912963867, -232.5067901611328), (-37.00883102416992, -233.2183074951172), (-37.00883102416992, -233.2183074951172), (-37.00883102416992, -233.2183074951172), (-41.05967330932617, -234.9507598876953), (-41.05967330932617, -234.9507598876953), (-41.05967330932617, -234.9507598876953), (-47.511199951171875, -236.83534240722656), (-47.511199951171875, -236.83534240722656), (-47.511199951171875, -236.83534240722656), (-48.73074722290039, -237.08253479003906), (-48.73074722290039, -237.08253479003906), (-48.73074722290039, -237.08253479003906), (-49.836708068847656, -237.30239868164062), (-49.836708068847656, -237.30239868164062), (-49.836708068847656, -237.30239868164062), (-82.33065032958984, -252.58604431152344), (-82.33065032958984, -252.58604431152344), (-82.33065032958984, -252.58604431152344), (-83.64540100097656, -253.64111328125), (-83.64540100097656, -253.64111328125), (-83.64540100097656, -253.64111328125), (-84.41484069824219, -254.24729919433594), (-84.41484069824219, -254.24729919433594), (-84.41484069824219, -254.24729919433594), (-85.94114685058594, -255.34461975097656), (-85.94114685058594, -255.34461975097656), (-85.94114685058594, -255.34461975097656), (-87.33699035644531, -256.2328186035156), (-87.33699035644531, -256.2328186035156), (-87.33699035644531, -256.2328186035156), (-90.85517120361328, -257.8513488769531), (-90.85517120361328, -257.8513488769531), (-90.85517120361328, -257.8513488769531), (-91.99845123291016, -258.1982727050781), (-91.99845123291016, -258.1982727050781), (-91.99845123291016, -258.1982727050781), (-93.30323028564453, -258.46832275390625), (-93.30323028564453, -258.46832275390625), (-93.63619995117188, -258.51483154296875), (-103.5543212890625, -255.09979248046875), (-103.5543212890625, -255.09979248046875), (-103.77188873291016, -254.87803649902344), (-107.34386444091797, -242.23480224609375), (-107.34386444091797, -242.23480224609375), (-107.34386444091797, -242.23480224609375), (-106.97811126708984, -240.98056030273438), (-106.97811126708984, -240.98056030273438), (-106.97811126708984, -240.98056030273438), (-106.57669830322266, -240.01136779785156), (-106.57669830322266, -240.01136779785156), (-106.47307586669922, -239.80545043945312), (-100.68789672851562, -235.27078247070312), (-100.68789672851562, -235.27078247070312), (-100.68789672851562, -235.27078247070312), (-99.44044494628906, -235.0413055419922), (-99.44044494628906, -235.0413055419922), (-99.44044494628906, -235.0413055419922), (-98.4730224609375, -234.93377685546875), (-98.4730224609375, -234.93377685546875), (-98.4730224609375, -234.93377685546875), (-97.49481201171875, -234.9120635986328), (-97.49481201171875, -234.9120635986328), (-97.49481201171875, -234.9120635986328), (-96.40371704101562, -234.95132446289062), (-96.40371704101562, -234.95132446289062), (-96.15506744384766, -234.9686737060547), (-95.0672836303711, -235.07101440429688), (-95.0672836303711, -235.07101440429688), (-95.0672836303711, -235.07101440429688), (-94.10812377929688, -235.20697021484375), (-94.10812377929688, -235.20697021484375), (-94.10812377929688, -235.20697021484375), (-92.85707092285156, -235.4168243408203), (-92.85707092285156, -235.4168243408203), (-92.85707092285156, -235.4168243408203), (-91.8695068359375, -235.596923828125), (-91.8695068359375, -235.596923828125), (-91.8695068359375, -235.596923828125), (-90.72698211669922, -235.79759216308594), (-90.72698211669922, -235.79759216308594), (-90.72698211669922, -235.79759216308594), (-90.01637268066406, -235.9065399169922), (-90.01637268066406, -235.9065399169922), (-89.71099090576172, -235.95013427734375), (-88.88365173339844, -236.05311584472656), (-88.88365173339844, -236.05311584472656), (-88.88365173339844, -236.05311584472656), (-85.1158447265625, -236.15753173828125), (-85.1158447265625, -236.15753173828125), (-85.1158447265625, -236.15753173828125), (-84.10546875, -236.1006622314453), (-84.10546875, -236.1006622314453), (-84.10546875, -236.1006622314453)]
    
    follower = PathFollower(path)
    follower.run()
